---
# This playbook:
#
# - modifies interface configurations to not control DNS
# - reboots hosts to enforce configurations
# - generates an /etc/hosts file based on IPs that have been
# successfully provisioned to interfaces & learned by Ansible
#
# Currently, just about everything in Polte relies in
# /etc/hosts being present in this form on every host.
#
# This may also be a handy entrypoint for adding e.g. default
# gateways and static routes for API/object/network nodes or
# other nodes which have legs in multiple networks.
#
# API/o/c node SELinux is also disabled. That is not related to
# the hosts file per se, it's just most optimal to do before
# reboots.

# workaround: SELinux <> rabbitmq HiPE compilation, httpd, haproxy..
- hosts: api:obj:compute
  become: yes
  become_user: root
  gather_facts: no
  tasks:
    - shell: sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config

- hosts: all:!puppet
  become: yes
  become_user: root
  gather_facts: yes
  tasks:
# workaround: Prevent dhcp on eth interfaces touching DNS
    - name: Modify interface network-scripts
      copy:
        content: |
          DEVICE="{{ item }}"
          BOOTPROTO="dhcp"
          ONBOOT="yes"
          PEERDNS="no"
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ item }}
      with_items: "{{ ansible_interfaces | difference('lo') | difference('fake0') }}"
      notify:
        - Reboot
    - name: Flush handlers
      meta: flush_handlers
  handlers:
    - name: Sleep and reboot
      shell: sleep 5 && shutdown -r now
      async: 1
      poll: 0
      ignore_errors: true
      listen: Reboot
    - name: Pause while waiting rebooted hosts
      pause:
        seconds: 30
      listen: Reboot

- hosts: puppet
  become: yes
  become_user: root
  gather_facts: yes
  tasks:
# workaround: Prevent dhcp on eth interfaces touching DNS
    - name: Modify interface network-scripts
      copy:
        content: |
          DEVICE="{{ item }}"
          BOOTPROTO="dhcp"
          ONBOOT="yes"
          PEERDNS="no"
        dest: /etc/sysconfig/network-scripts/ifcfg-{{ item }}
      with_items: "{{ ansible_interfaces | difference('lo') | difference('fake0') }}"
      notify:
        - Reboot
    - name: Flush handlers
      meta: flush_handlers
  handlers:
    - name: Sleep and reboot
      shell: sleep 5 && shutdown -r now
      async: 1
      poll: 0
      ignore_errors: true
      listen: Reboot
    - name: Pause while waiting rebooted hosts
      pause:
        seconds: 30
      listen: Reboot

# workaround: Populate hosts file
- hosts: all
  become: yes
  become_user: root
  gather_facts: yes
  tasks:
    - name: Clear host errors
      meta: clear_host_errors
    - name: Generate /etc/hosts file
      template:
        src: templates/hosts.j2
        dest: /etc/hosts
